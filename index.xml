<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Boring Machine Learning</title><link>http://boringml.com/</link><description>Recent content in Introduction on Boring Machine Learning</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://boringml.com/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://boringml.com/docs/recsys/jaccard-similarity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://boringml.com/docs/recsys/jaccard-similarity/</guid><description>Jaccard Similarity # import numpy as numpy import typing a = [1,2,3,4,5,11,12] b = [2,3,4,5,6,8,9] cats = [&amp;#34;calico&amp;#34;, &amp;#34;tabby&amp;#34;, &amp;#34;tom&amp;#34;] dogs = [&amp;#34;collie&amp;#34;, &amp;#34;tom&amp;#34;,&amp;#34;bassett&amp;#34;] def jaccard(list1: list, list2: list)-&amp;gt; float: intersection = len(list(set(list1).intersection(list2))) union = (len(set((list1)) + set(len(list2))) - intersection return float(intersection/union) print(jaccard(cats,dogs)) jaccardSimilarity in Scala # val aVals: Seq[Int] = Seq(1,2,3,4,5,11,12) val bVals: Seq[Int] = Seq(2,3,4,5,6,8,9) def calculateJaccard[T](a: Seq[T], b: Seq[T]): Double = a.intersect(b).size / a.union(b).size.toDouble println(calculateJaccard(aVals, bVals))</description></item><item><title>Hash aggregates</title><link>http://boringml.com/docs/computer-science/hash-aggregate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://boringml.com/docs/computer-science/hash-aggregate/</guid><description>This post is an expansion of this tweet:
If I had to pick a single programming concept where understanding it is like a superpower, it would probably be the hash map (aka in Python, the humble dictionary) because I&amp;#39;ve seen the pattern come up in almost every kind of data/programming work I&amp;#39;ve ever done.
&amp;mdash; Vicki (*args,**kwargs) (@vboykis) July 8, 2020 Hash Aggregate Here # But data work also has its own unique patterns, and I want to talk about one of these that I think is important for all of us to carry around in our back pockets: the humble hash aggregate.</description></item></channel></rss>